<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Posts Board</title>
    <link rel="stylesheet" href="/static/styles/base.css">
    <link rel="stylesheet" href="/static/styles/layout.css">
    <link rel="stylesheet" href="/static/styles/forms.css">
    <link rel="stylesheet" href="/static/styles/posts.css">
</head>
<body>
    <div class="container" style="width:600px;">
        <div class="card">
            <h1>The Wall</h1>
            <div class="field">
                <label for="postContent">What's on your mind?</label>
                <textarea id="postContent" rows="3" class="field"></textarea>
            </div>
            <div class="actions">
                <button id="addPostBtn">Post</button>
            </div>
            <p id="postMessage" class="message"></p>
        </div>

        <div class="posts" id="postsContainer">
            {{ posts_html | safe }}
        </div>
    </div>
</body>
</html>

<script>
const currentUserId = {{ current_user_id }};
const addPostBtn = document.getElementById("addPostBtn");
const postContent = document.getElementById("postContent");
const postMessage = document.getElementById("postMessage");
const postsContainer = document.getElementById("postsContainer");

// –ê–≤—Ç–æ—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ textarea
function autoResizeTextarea(textarea) {
    textarea.style.height = "auto";
    textarea.style.height = (textarea.scrollHeight) + "px";
}

// –ù–æ–≤—ã–π –ø–æ—Å—Ç ‚Äî –∞–≤—Ç–æ—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–∏ –≤–≤–æ–¥–µ
postContent.addEventListener("input", () => autoResizeTextarea(postContent));

// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
addPostBtn.addEventListener("click", async () => {
    const content = postContent.value.trim();
    if (!content) {
        postMessage.textContent = "Post cannot be empty.";
        postMessage.className = "message error";
        return;
    }

    try {
        const res = await fetch("/post", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ text: content }),
            credentials: "include"
        });
        const data = await res.json();
        if (data.status === 200) {
            const newPostHTML = `
                <div class="post" data-id="${data.post_id}">
                    <div class="post-header">
                        <span class="author">${data.author_username}</span>
                        <span class="actions">
                            <button class="icon-btn edit-btn" title="Edit">‚úèÔ∏è</button>
                            <button class="icon-btn delete-btn" title="Delete">üóë</button>
                        </span>
                    </div>
                    <div class="post-content field">${data.content}</div>
                    <div class="post-footer"><span class="date">${new Date(data.created_at).toLocaleString()}</span></div>
                </div>`;
            postsContainer.insertAdjacentHTML('afterbegin', newPostHTML);
            postContent.value = "";
            autoResizeTextarea(postContent);
            postMessage.textContent = "Post added!";
            postMessage.className = "message success";
        } else {
            postMessage.textContent = data.error || "Error adding post.";
            postMessage.className = "message error";
        }
    } catch (err) {
        postMessage.textContent = err.message;
        postMessage.className = "message error";
    }
});

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
postsContainer.addEventListener("click", async (e) => {
    const postEl = e.target.closest(".post");
    if (!postEl) return;
    const postId = postEl.dataset.id;
    const contentEl = postEl.querySelector(".post-content");

    // DELETE
    if (e.target.closest(".delete-btn")) {
        const res = await fetch(`/post/${postId}`, { method: "DELETE", credentials: "include" });
        const data = await res.json();
        if (data.status === 200) {
            postEl.remove();
        } else {
            alert(data.message || "Error deleting post");
        }
        return;
    }

    // EDIT
    if (e.target.closest(".edit-btn")) {
        if (postEl.querySelector(".edit-wrapper")) return; // —É–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º

        const oldText = contentEl.textContent;
        contentEl.style.display = "none";

        const textarea = document.createElement("textarea");
        textarea.className = "field edit-area";
        textarea.value = oldText;
        textarea.style.width = "100%";
        autoResizeTextarea(textarea);
        textarea.addEventListener("input", () => autoResizeTextarea(textarea));

        const saveBtn = document.createElement("button");
        saveBtn.textContent = "Save";
        saveBtn.className = "icon-btn save-btn";

        const cancelBtn = document.createElement("button");
        cancelBtn.textContent = "Cancel";
        cancelBtn.className = "icon-btn cancel-btn";

        const editWrapper = document.createElement("div");
        editWrapper.className = "edit-wrapper";
        editWrapper.appendChild(textarea);
        editWrapper.appendChild(saveBtn);
        editWrapper.appendChild(cancelBtn);
        contentEl.parentNode.insertBefore(editWrapper, contentEl.nextSibling);

        // CANCEL
        cancelBtn.addEventListener("click", () => {
            editWrapper.remove();
            contentEl.style.display = "";
        });

        // SAVE
        saveBtn.addEventListener("click", async () => {
            const newText = textarea.value.trim();
            if (!newText) return alert("Post cannot be empty.");

            try {
                const res = await fetch(`/post/${postId}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ text: newText }),
                    credentials: "include"
                });
                const data = await res.json();
                if (data.status === 200) {
                    contentEl.textContent = newText; // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                    editWrapper.remove();
                    contentEl.style.display = "";
                } else {
                    alert(data.message || "Error updating post");
                }
            } catch (err) {
                alert(err.message);
            }
        });
    }
});
</script>