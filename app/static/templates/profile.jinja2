<!DOCTYPE html>
<html lang="ru">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Profile Settings</title>
    <link rel="stylesheet" href="/static/styles/base.css">
    <link rel="stylesheet" href="/static/styles/layout.css">
    <link rel="stylesheet" href="/static/styles/header.css">
    <link rel="stylesheet" href="/static/styles/forms.css">
    <link rel="stylesheet" href="/static/styles/profile.css">
    <link rel="stylesheet" href="/static/styles/profile-actions.css">
</head>

<body>
    {{ header_fragment }}

    <main>
        <div class="profile-card">

            <h1>Profile Settings</h1>

            {# Аватар #}
            <img id="avatar-img" class="avatar-img" src="{{ user.avatar or '/static/images/default-avatar.png' }}"
                alt="avatar">
            <div class="avatar-edit-row">
                <input id="avatar-url-input" type="text" placeholder="Avatar URL" style="display:none; width:180px;">
                <button id="edit-avatar-btn" class="edit-btn" type="button">Edit</button>
                <button id="save-avatar-btn" class="save-avatar-btn" type="button" style="display:none;">✔</button>
            </div>

            {# Личная информация #}
            <table class="profile-table">
                <tr>
                    <td class="attr">ID</td>
                    <td class="value">{{ user.id }}</td>
                </tr>
                <tr>
                    <td class="attr">Username</td>
                    <td class="value username-edit-cell" id="username-td">
                        <span id="username-value">{{ user.username }}</span>
                        <button id="edit-username-btn" class="edit-btn" type="button">Edit</button>
                    </td>
                </tr>
                <tr>
                    <td class="attr">Registered at</td>
                    <td class="value">{{ user.created_at }}</td>
                </tr>
            </table>
            <div style="text-align:center;">
                <!-- Смена пароля -->
                <div class="change-password-field">
                    <div class="change-password-title">Password change</div>
                    <form id="change-password-form" class="change-password-form">
                        <input class="change-password-input" type="password" id="old-password"
                            placeholder="Current password" required>
                        <input class="change-password-input" type="password" id="new-password"
                            placeholder="New password" required>
                        <input class="change-password-input" type="password" id="confirm-password"
                            placeholder="Confirm new password" required>
                        <button type="submit" class="edit-btn">Change password</button>
                        <span id="password-message" class="message" style="display:none;"></span>
                    </form>
                </div>
                <button id="delete-account-btn" class="account-delete-btn">Delete Account</button>

                {# Всплывающее окно подтверждения удаления аккаунта #}
                <div id="delete-confirm-popup">
                    <div class="confirm-popup-inner">
                        <div class="popup-title">Are you sure you want to delete your account?</div>
                        <button id="confirm-delete-btn">Delete</button>
                        <button id="cancel-delete-btn">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="profile-notification" class="profile-notification" style="display:none;">Your account was logged in
        </div>
    </main>
    <script>
        // --- Редактирование никнейма ---
        const editUsernameBtn = document.getElementById('edit-username-btn');
        const usernameTd = document.getElementById('username-td');
        const usernameValue = document.getElementById('username-value');
        if (editUsernameBtn) {
            editUsernameBtn.onclick = () => {
                const current = usernameValue.textContent.trim();
                usernameValue.style.display = 'none';
                editUsernameBtn.style.display = 'none';
                // Контейнер для поля и кнопки в одну строку
                const editRow = document.createElement('div');
                editRow.className = 'username-edit-row-flex';
                const input = document.createElement('input');
                input.type = 'text';
                input.value = current;
                input.className = 'username-edit-input';
                const saveBtn = document.createElement('button');
                saveBtn.textContent = 'Save';
                saveBtn.className = 'edit-btn';
                saveBtn.onclick = async () => {
                    try {
                        await updateUser({{ user.id }}, { username: input.value });
                    usernameValue.textContent = input.value;
                    showNotification('Username updated!');
                } catch (e) {
                    showNotification('Failed to update username');
                }
                usernameTd.removeChild(editRow);
                usernameValue.style.display = '';
                editUsernameBtn.style.display = '';
            };
            editRow.appendChild(input);
            editRow.appendChild(saveBtn);
            usernameTd.appendChild(editRow);
            input.focus();
        };
        }

        // --- Смена пароля ---
        const changePasswordForm = document.getElementById('change-password-form');
        const passwordMessage = document.getElementById('password-message');
        if (changePasswordForm) {
            changePasswordForm.onsubmit = async (e) => {
                e.preventDefault();
                const oldPassword = document.getElementById('old-password').value;
                const newPassword = document.getElementById('new-password').value;
                passwordMessage.style.display = 'none';
                const confirmPassword = document.getElementById('confirm-password').value;
                if (newPassword !== confirmPassword) {
                    passwordMessage.textContent = 'Passwords do not match';
                    passwordMessage.className = 'message error';
                    passwordMessage.style.display = 'block';
                    return;
                }
                try {
                    const resp = await fetch(`/user/{{ user.id }}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
                        body: JSON.stringify({ old_password: oldPassword, new_password: newPassword })
                    });
                    const data = await resp.json();
                    if (resp.ok && data.status === 200) {
                        passwordMessage.textContent = 'Password changed!';
                        passwordMessage.className = 'message success';
                    } else {
                        passwordMessage.textContent = data.message || 'Failed to change password';
                        passwordMessage.className = 'message error';
                    }
                } catch (err) {
                    passwordMessage.textContent = err.message;
                    passwordMessage.className = 'message error';
                }
                passwordMessage.style.display = 'block';
                changePasswordForm.reset();
            };
        }
        async function getUser(id) {
            const resp = await fetch(`/user/${id}`, {
                method: 'GET',
                headers: { 'Accept': 'application/json' }
            });
            if (!resp.ok) throw new Error('Failed to fetch profile');
            return await resp.json();
        }
        async function updateUser(id, data) {
            console.log(data)
            const resp = await fetch(`/user/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(data)
            });
            if (!resp.ok) throw new Error('Failed to update profile');
            return await resp.json();
        }
        async function deleteUser(id) {
            const resp = await fetch(`/user/${id}`, {
                method: 'DELETE',
                headers: { 'Accept': 'application/json' }
            });
            if (!resp.ok) throw new Error('Failed to delete account');
            return await resp.json();
        }

        // --- Аватар ---
        const avatarImg = document.getElementById('avatar-img');
        const avatarInput = document.getElementById('avatar-url-input');
        const editAvatarBtn = document.getElementById('edit-avatar-btn');
        const saveAvatarBtn = document.getElementById('save-avatar-btn');

        editAvatarBtn.onclick = () => {
            avatarInput.style.display = 'inline-block';
            saveAvatarBtn.style.display = 'inline-block';
            editAvatarBtn.style.display = 'none';
            avatarInput.value = '';
            avatarInput.focus();
        };
        saveAvatarBtn.onclick = async () => {
            const url = avatarInput.value.trim();
            if (url) {
                try {
                    await updateUser({{ user.id }}, { avatar: url });
                avatarImg.src = url;
                showNotification('Avatar updated!');
            } catch (e) {
                showNotification('Failed to update avatar');
            }
        }
        avatarInput.style.display = 'none';
        saveAvatarBtn.style.display = 'none';
        editAvatarBtn.style.display = 'inline-block';
        };

        // --- Редактирование полей ---
        function editField(field) {
            const td = document.querySelector(`td.value:has([onclick*="${field}"])`);
            if (!td) return;
            const current = td.childNodes[0].textContent.trim();
            const input = document.createElement('input');
            input.type = 'text';
            input.value = current;
            input.style.marginRight = '8px';
            const saveBtn = document.createElement('button');
            saveBtn.textContent = 'Save';
            saveBtn.className = 'edit-btn';
            saveBtn.onclick = async () => {
                try {
                    await updateUser({{ user.id }}, { [field]: input.value });
                td.childNodes[0].textContent = input.value + ' ';
                showNotification('Field updated!');
            } catch (e) {
                showNotification('Failed to update');
            }
            td.removeChild(input);
            td.removeChild(saveBtn);
            td.querySelector('.edit-btn').style.display = '';
        };
        td.insertBefore(input, td.querySelector('.edit-btn'));
        td.insertBefore(saveBtn, td.querySelector('.edit-btn'));
        td.querySelector('.edit-btn').style.display = 'none';
        input.focus();
        }

        // --- Уведомление ---
        function showNotification(msg) {
            const n = document.getElementById('profile-notification');
            n.textContent = msg;
            n.style.display = 'block';
            setTimeout(() => { n.style.display = 'none'; }, 2500);
        }
        // --- Удаление аккаунта ---
        const deleteBtn = document.getElementById('delete-account-btn');
        const confirmPopup = document.getElementById('delete-confirm-popup');
        const confirmDeleteBtn = document.getElementById('confirm-delete-btn');
        const cancelDeleteBtn = document.getElementById('cancel-delete-btn');

        if (deleteBtn) {
            deleteBtn.onclick = () => {
                confirmPopup.style.display = 'block';
            };
        }
        if (cancelDeleteBtn) {
            cancelDeleteBtn.onclick = () => {
                confirmPopup.style.display = 'none';
            };
        }
        if (confirmDeleteBtn) {
            confirmDeleteBtn.onclick = async () => {
                confirmDeleteBtn.disabled = true;
                try {
                    await deleteUser({{ user.id }});
                await fetch('/auth/logout/', { method: 'POST', credentials: 'include' });
                setTimeout(() => { window.location.href = '/auth/login'; }, 1000);
            } catch (e) {
            }
            confirmDeleteBtn.disabled = false;
            confirmPopup.style.display = 'none';
        };
        }
    </script>
</body>

</html>